//--------------------------------------------------------------------------------
// Auto-generated by LiteX (--------) on 2022-11-23 09:12:06
//--------------------------------------------------------------------------------
#include <generated/soc.h>
#ifndef __GENERATED_CSR_H
#define __GENERATED_CSR_H
#include <stdint.h>
#include <system.h>
#ifndef CSR_ACCESSORS_DEFINED
#include <hw/common.h>
#endif /* ! CSR_ACCESSORS_DEFINED */
#ifndef CSR_BASE
#define CSR_BASE 0xf0000000L
#endif

/* leds */
#define CSR_LEDS_BASE (CSR_BASE + 0x0L)
#define CSR_LEDS_OUT_ADDR (CSR_BASE + 0x0L)
#define CSR_LEDS_OUT_SIZE 1
static inline uint32_t leds_out_read(void) {
	return csr_read_simple((CSR_BASE + 0x0L));
}
static inline void leds_out_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x0L));
}

/* switchs */
#define CSR_SWITCHS_BASE (CSR_BASE + 0x800L)
#define CSR_SWITCHS_IN_ADDR (CSR_BASE + 0x800L)
#define CSR_SWITCHS_IN_SIZE 1
static inline uint32_t switchs_in_read(void) {
	return csr_read_simple((CSR_BASE + 0x800L));
}

/* buttons_D */
#define CSR_BUTTONS_D_BASE (CSR_BASE + 0x1000L)
#define CSR_BUTTONS_D_IN_ADDR (CSR_BASE + 0x1000L)
#define CSR_BUTTONS_D_IN_SIZE 1
static inline uint32_t buttons_D_in_read(void) {
	return csr_read_simple((CSR_BASE + 0x1000L));
}

/* buttons_I */
#define CSR_BUTTONS_I_BASE (CSR_BASE + 0x1800L)
#define CSR_BUTTONS_I_IN_ADDR (CSR_BASE + 0x1800L)
#define CSR_BUTTONS_I_IN_SIZE 1
static inline uint32_t buttons_I_in_read(void) {
	return csr_read_simple((CSR_BASE + 0x1800L));
}

/* buttons_ul_del */
#define CSR_BUTTONS_UL_DEL_BASE (CSR_BASE + 0x2000L)
#define CSR_BUTTONS_UL_DEL_IN_ADDR (CSR_BASE + 0x2000L)
#define CSR_BUTTONS_UL_DEL_IN_SIZE 1
static inline uint32_t buttons_ul_del_in_read(void) {
	return csr_read_simple((CSR_BASE + 0x2000L));
}

/* buttons_ul_tra */
#define CSR_BUTTONS_UL_TRA_BASE (CSR_BASE + 0x2800L)
#define CSR_BUTTONS_UL_TRA_IN_ADDR (CSR_BASE + 0x2800L)
#define CSR_BUTTONS_UL_TRA_IN_SIZE 1
static inline uint32_t buttons_ul_tra_in_read(void) {
	return csr_read_simple((CSR_BASE + 0x2800L));
}

/* ledRGB_1 */
#define CSR_LEDRGB_1_BASE (CSR_BASE + 0x3000L)
#define CSR_LEDRGB_1_R_ENABLE_ADDR (CSR_BASE + 0x3000L)
#define CSR_LEDRGB_1_R_ENABLE_SIZE 1
static inline uint32_t ledRGB_1_r_enable_read(void) {
	return csr_read_simple((CSR_BASE + 0x3000L));
}
static inline void ledRGB_1_r_enable_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x3000L));
}
#define CSR_LEDRGB_1_R_WIDTH_ADDR (CSR_BASE + 0x3004L)
#define CSR_LEDRGB_1_R_WIDTH_SIZE 1
static inline uint32_t ledRGB_1_r_width_read(void) {
	return csr_read_simple((CSR_BASE + 0x3004L));
}
static inline void ledRGB_1_r_width_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x3004L));
}
#define CSR_LEDRGB_1_R_PERIOD_ADDR (CSR_BASE + 0x3008L)
#define CSR_LEDRGB_1_R_PERIOD_SIZE 1
static inline uint32_t ledRGB_1_r_period_read(void) {
	return csr_read_simple((CSR_BASE + 0x3008L));
}
static inline void ledRGB_1_r_period_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x3008L));
}
#define CSR_LEDRGB_1_G_ENABLE_ADDR (CSR_BASE + 0x300cL)
#define CSR_LEDRGB_1_G_ENABLE_SIZE 1
static inline uint32_t ledRGB_1_g_enable_read(void) {
	return csr_read_simple((CSR_BASE + 0x300cL));
}
static inline void ledRGB_1_g_enable_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x300cL));
}
#define CSR_LEDRGB_1_G_WIDTH_ADDR (CSR_BASE + 0x3010L)
#define CSR_LEDRGB_1_G_WIDTH_SIZE 1
static inline uint32_t ledRGB_1_g_width_read(void) {
	return csr_read_simple((CSR_BASE + 0x3010L));
}
static inline void ledRGB_1_g_width_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x3010L));
}
#define CSR_LEDRGB_1_G_PERIOD_ADDR (CSR_BASE + 0x3014L)
#define CSR_LEDRGB_1_G_PERIOD_SIZE 1
static inline uint32_t ledRGB_1_g_period_read(void) {
	return csr_read_simple((CSR_BASE + 0x3014L));
}
static inline void ledRGB_1_g_period_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x3014L));
}
#define CSR_LEDRGB_1_B_ENABLE_ADDR (CSR_BASE + 0x3018L)
#define CSR_LEDRGB_1_B_ENABLE_SIZE 1
static inline uint32_t ledRGB_1_b_enable_read(void) {
	return csr_read_simple((CSR_BASE + 0x3018L));
}
static inline void ledRGB_1_b_enable_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x3018L));
}
#define CSR_LEDRGB_1_B_WIDTH_ADDR (CSR_BASE + 0x301cL)
#define CSR_LEDRGB_1_B_WIDTH_SIZE 1
static inline uint32_t ledRGB_1_b_width_read(void) {
	return csr_read_simple((CSR_BASE + 0x301cL));
}
static inline void ledRGB_1_b_width_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x301cL));
}
#define CSR_LEDRGB_1_B_PERIOD_ADDR (CSR_BASE + 0x3020L)
#define CSR_LEDRGB_1_B_PERIOD_SIZE 1
static inline uint32_t ledRGB_1_b_period_read(void) {
	return csr_read_simple((CSR_BASE + 0x3020L));
}
static inline void ledRGB_1_b_period_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x3020L));
}

/* ledRGB_2 */
#define CSR_LEDRGB_2_BASE (CSR_BASE + 0x3800L)
#define CSR_LEDRGB_2_R_ENABLE_ADDR (CSR_BASE + 0x3800L)
#define CSR_LEDRGB_2_R_ENABLE_SIZE 1
static inline uint32_t ledRGB_2_r_enable_read(void) {
	return csr_read_simple((CSR_BASE + 0x3800L));
}
static inline void ledRGB_2_r_enable_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x3800L));
}
#define CSR_LEDRGB_2_R_WIDTH_ADDR (CSR_BASE + 0x3804L)
#define CSR_LEDRGB_2_R_WIDTH_SIZE 1
static inline uint32_t ledRGB_2_r_width_read(void) {
	return csr_read_simple((CSR_BASE + 0x3804L));
}
static inline void ledRGB_2_r_width_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x3804L));
}
#define CSR_LEDRGB_2_R_PERIOD_ADDR (CSR_BASE + 0x3808L)
#define CSR_LEDRGB_2_R_PERIOD_SIZE 1
static inline uint32_t ledRGB_2_r_period_read(void) {
	return csr_read_simple((CSR_BASE + 0x3808L));
}
static inline void ledRGB_2_r_period_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x3808L));
}
#define CSR_LEDRGB_2_G_ENABLE_ADDR (CSR_BASE + 0x380cL)
#define CSR_LEDRGB_2_G_ENABLE_SIZE 1
static inline uint32_t ledRGB_2_g_enable_read(void) {
	return csr_read_simple((CSR_BASE + 0x380cL));
}
static inline void ledRGB_2_g_enable_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x380cL));
}
#define CSR_LEDRGB_2_G_WIDTH_ADDR (CSR_BASE + 0x3810L)
#define CSR_LEDRGB_2_G_WIDTH_SIZE 1
static inline uint32_t ledRGB_2_g_width_read(void) {
	return csr_read_simple((CSR_BASE + 0x3810L));
}
static inline void ledRGB_2_g_width_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x3810L));
}
#define CSR_LEDRGB_2_G_PERIOD_ADDR (CSR_BASE + 0x3814L)
#define CSR_LEDRGB_2_G_PERIOD_SIZE 1
static inline uint32_t ledRGB_2_g_period_read(void) {
	return csr_read_simple((CSR_BASE + 0x3814L));
}
static inline void ledRGB_2_g_period_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x3814L));
}
#define CSR_LEDRGB_2_B_ENABLE_ADDR (CSR_BASE + 0x3818L)
#define CSR_LEDRGB_2_B_ENABLE_SIZE 1
static inline uint32_t ledRGB_2_b_enable_read(void) {
	return csr_read_simple((CSR_BASE + 0x3818L));
}
static inline void ledRGB_2_b_enable_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x3818L));
}
#define CSR_LEDRGB_2_B_WIDTH_ADDR (CSR_BASE + 0x381cL)
#define CSR_LEDRGB_2_B_WIDTH_SIZE 1
static inline uint32_t ledRGB_2_b_width_read(void) {
	return csr_read_simple((CSR_BASE + 0x381cL));
}
static inline void ledRGB_2_b_width_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x381cL));
}
#define CSR_LEDRGB_2_B_PERIOD_ADDR (CSR_BASE + 0x3820L)
#define CSR_LEDRGB_2_B_PERIOD_SIZE 1
static inline uint32_t ledRGB_2_b_period_read(void) {
	return csr_read_simple((CSR_BASE + 0x3820L));
}
static inline void ledRGB_2_b_period_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x3820L));
}

/* display */
#define CSR_DISPLAY_BASE (CSR_BASE + 0x4000L)
#define CSR_DISPLAY_SEL_ADDR (CSR_BASE + 0x4000L)
#define CSR_DISPLAY_SEL_SIZE 1
static inline uint32_t display_sel_read(void) {
	return csr_read_simple((CSR_BASE + 0x4000L));
}
static inline void display_sel_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x4000L));
}
#define CSR_DISPLAY_VALUE_ADDR (CSR_BASE + 0x4004L)
#define CSR_DISPLAY_VALUE_SIZE 1
static inline uint32_t display_value_read(void) {
	return csr_read_simple((CSR_BASE + 0x4004L));
}
static inline void display_value_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x4004L));
}
#define CSR_DISPLAY_WRITE_ADDR (CSR_BASE + 0x4008L)
#define CSR_DISPLAY_WRITE_SIZE 1
static inline uint32_t display_write_read(void) {
	return csr_read_simple((CSR_BASE + 0x4008L));
}
static inline void display_write_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x4008L));
}

/* servomotor_cntrl1 */
#define CSR_SERVOMOTOR_CNTRL1_BASE (CSR_BASE + 0x4800L)
#define CSR_SERVOMOTOR_CNTRL1_POSICION_ADDR (CSR_BASE + 0x4800L)
#define CSR_SERVOMOTOR_CNTRL1_POSICION_SIZE 1
static inline uint32_t servomotor_cntrl1_posicion_read(void) {
	return csr_read_simple((CSR_BASE + 0x4800L));
}
static inline void servomotor_cntrl1_posicion_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x4800L));
}

/* servomotor_cntrl2 */
#define CSR_SERVOMOTOR_CNTRL2_BASE (CSR_BASE + 0x5000L)
#define CSR_SERVOMOTOR_CNTRL2_POSICION_ADDR (CSR_BASE + 0x5000L)
#define CSR_SERVOMOTOR_CNTRL2_POSICION_SIZE 1
static inline uint32_t servomotor_cntrl2_posicion_read(void) {
	return csr_read_simple((CSR_BASE + 0x5000L));
}
static inline void servomotor_cntrl2_posicion_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x5000L));
}

/* ultrasonido_cntrl1 */
#define CSR_ULTRASONIDO_CNTRL1_BASE (CSR_BASE + 0x5800L)
#define CSR_ULTRASONIDO_CNTRL1_INIT_ADDR (CSR_BASE + 0x5800L)
#define CSR_ULTRASONIDO_CNTRL1_INIT_SIZE 1
static inline uint32_t ultrasonido_cntrl1_init_read(void) {
	return csr_read_simple((CSR_BASE + 0x5800L));
}
static inline void ultrasonido_cntrl1_init_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x5800L));
}
#define CSR_ULTRASONIDO_CNTRL1_DISTANCE_ADDR (CSR_BASE + 0x5804L)
#define CSR_ULTRASONIDO_CNTRL1_DISTANCE_SIZE 1
static inline uint32_t ultrasonido_cntrl1_distance_read(void) {
	return csr_read_simple((CSR_BASE + 0x5804L));
}
#define CSR_ULTRASONIDO_CNTRL1_DONE_ADDR (CSR_BASE + 0x5808L)
#define CSR_ULTRASONIDO_CNTRL1_DONE_SIZE 1
static inline uint32_t ultrasonido_cntrl1_done_read(void) {
	return csr_read_simple((CSR_BASE + 0x5808L));
}

/* ultrasonido_cntrl2 */
#define CSR_ULTRASONIDO_CNTRL2_BASE (CSR_BASE + 0x6000L)
#define CSR_ULTRASONIDO_CNTRL2_INIT_ADDR (CSR_BASE + 0x6000L)
#define CSR_ULTRASONIDO_CNTRL2_INIT_SIZE 1
static inline uint32_t ultrasonido_cntrl2_init_read(void) {
	return csr_read_simple((CSR_BASE + 0x6000L));
}
static inline void ultrasonido_cntrl2_init_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x6000L));
}
#define CSR_ULTRASONIDO_CNTRL2_DISTANCE_ADDR (CSR_BASE + 0x6004L)
#define CSR_ULTRASONIDO_CNTRL2_DISTANCE_SIZE 1
static inline uint32_t ultrasonido_cntrl2_distance_read(void) {
	return csr_read_simple((CSR_BASE + 0x6004L));
}
#define CSR_ULTRASONIDO_CNTRL2_DONE_ADDR (CSR_BASE + 0x6008L)
#define CSR_ULTRASONIDO_CNTRL2_DONE_SIZE 1
static inline uint32_t ultrasonido_cntrl2_done_read(void) {
	return csr_read_simple((CSR_BASE + 0x6008L));
}

/* parlante_cntrl */
#define CSR_PARLANTE_CNTRL_BASE (CSR_BASE + 0x6800L)
#define CSR_PARLANTE_CNTRL_MAX_CONT_ADDR (CSR_BASE + 0x6800L)
#define CSR_PARLANTE_CNTRL_MAX_CONT_SIZE 1
static inline uint32_t parlante_cntrl_max_cont_read(void) {
	return csr_read_simple((CSR_BASE + 0x6800L));
}
static inline void parlante_cntrl_max_cont_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x6800L));
}
#define CSR_PARLANTE_CNTRL_ENABLE_ADDR (CSR_BASE + 0x6804L)
#define CSR_PARLANTE_CNTRL_ENABLE_SIZE 1
static inline uint32_t parlante_cntrl_enable_read(void) {
	return csr_read_simple((CSR_BASE + 0x6804L));
}
static inline void parlante_cntrl_enable_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x6804L));
}

/* ctrl */
#define CSR_CTRL_BASE (CSR_BASE + 0x7000L)
#define CSR_CTRL_RESET_ADDR (CSR_BASE + 0x7000L)
#define CSR_CTRL_RESET_SIZE 1
static inline uint32_t ctrl_reset_read(void) {
	return csr_read_simple((CSR_BASE + 0x7000L));
}
static inline void ctrl_reset_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x7000L));
}
#define CSR_CTRL_RESET_SOC_RST_OFFSET 0
#define CSR_CTRL_RESET_SOC_RST_SIZE 1
static inline uint32_t ctrl_reset_soc_rst_extract(uint32_t oldword) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return ( (oldword >> 0) & mask );
}
static inline uint32_t ctrl_reset_soc_rst_read(void) {
	uint32_t word = ctrl_reset_read();
	return ctrl_reset_soc_rst_extract(word);
}
static inline uint32_t ctrl_reset_soc_rst_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void ctrl_reset_soc_rst_write(uint32_t plain_value) {
	uint32_t oldword = ctrl_reset_read();
	uint32_t newword = ctrl_reset_soc_rst_replace(oldword, plain_value);
	ctrl_reset_write(newword);
}
#define CSR_CTRL_RESET_CPU_RST_OFFSET 1
#define CSR_CTRL_RESET_CPU_RST_SIZE 1
static inline uint32_t ctrl_reset_cpu_rst_extract(uint32_t oldword) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return ( (oldword >> 1) & mask );
}
static inline uint32_t ctrl_reset_cpu_rst_read(void) {
	uint32_t word = ctrl_reset_read();
	return ctrl_reset_cpu_rst_extract(word);
}
static inline uint32_t ctrl_reset_cpu_rst_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return (oldword & (~(mask << 1))) | (mask & plain_value)<< 1 ;
}
static inline void ctrl_reset_cpu_rst_write(uint32_t plain_value) {
	uint32_t oldword = ctrl_reset_read();
	uint32_t newword = ctrl_reset_cpu_rst_replace(oldword, plain_value);
	ctrl_reset_write(newword);
}
#define CSR_CTRL_SCRATCH_ADDR (CSR_BASE + 0x7004L)
#define CSR_CTRL_SCRATCH_SIZE 1
static inline uint32_t ctrl_scratch_read(void) {
	return csr_read_simple((CSR_BASE + 0x7004L));
}
static inline void ctrl_scratch_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x7004L));
}
#define CSR_CTRL_BUS_ERRORS_ADDR (CSR_BASE + 0x7008L)
#define CSR_CTRL_BUS_ERRORS_SIZE 1
static inline uint32_t ctrl_bus_errors_read(void) {
	return csr_read_simple((CSR_BASE + 0x7008L));
}

/* timer0 */
#define CSR_TIMER0_BASE (CSR_BASE + 0x7800L)
#define CSR_TIMER0_LOAD_ADDR (CSR_BASE + 0x7800L)
#define CSR_TIMER0_LOAD_SIZE 1
static inline uint32_t timer0_load_read(void) {
	return csr_read_simple((CSR_BASE + 0x7800L));
}
static inline void timer0_load_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x7800L));
}
#define CSR_TIMER0_RELOAD_ADDR (CSR_BASE + 0x7804L)
#define CSR_TIMER0_RELOAD_SIZE 1
static inline uint32_t timer0_reload_read(void) {
	return csr_read_simple((CSR_BASE + 0x7804L));
}
static inline void timer0_reload_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x7804L));
}
#define CSR_TIMER0_EN_ADDR (CSR_BASE + 0x7808L)
#define CSR_TIMER0_EN_SIZE 1
static inline uint32_t timer0_en_read(void) {
	return csr_read_simple((CSR_BASE + 0x7808L));
}
static inline void timer0_en_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x7808L));
}
#define CSR_TIMER0_UPDATE_VALUE_ADDR (CSR_BASE + 0x780cL)
#define CSR_TIMER0_UPDATE_VALUE_SIZE 1
static inline uint32_t timer0_update_value_read(void) {
	return csr_read_simple((CSR_BASE + 0x780cL));
}
static inline void timer0_update_value_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x780cL));
}
#define CSR_TIMER0_VALUE_ADDR (CSR_BASE + 0x7810L)
#define CSR_TIMER0_VALUE_SIZE 1
static inline uint32_t timer0_value_read(void) {
	return csr_read_simple((CSR_BASE + 0x7810L));
}
#define CSR_TIMER0_EV_STATUS_ADDR (CSR_BASE + 0x7814L)
#define CSR_TIMER0_EV_STATUS_SIZE 1
static inline uint32_t timer0_ev_status_read(void) {
	return csr_read_simple((CSR_BASE + 0x7814L));
}
#define CSR_TIMER0_EV_STATUS_ZERO_OFFSET 0
#define CSR_TIMER0_EV_STATUS_ZERO_SIZE 1
static inline uint32_t timer0_ev_status_zero_extract(uint32_t oldword) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return ( (oldword >> 0) & mask );
}
static inline uint32_t timer0_ev_status_zero_read(void) {
	uint32_t word = timer0_ev_status_read();
	return timer0_ev_status_zero_extract(word);
}
#define CSR_TIMER0_EV_PENDING_ADDR (CSR_BASE + 0x7818L)
#define CSR_TIMER0_EV_PENDING_SIZE 1
static inline uint32_t timer0_ev_pending_read(void) {
	return csr_read_simple((CSR_BASE + 0x7818L));
}
static inline void timer0_ev_pending_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x7818L));
}
#define CSR_TIMER0_EV_PENDING_ZERO_OFFSET 0
#define CSR_TIMER0_EV_PENDING_ZERO_SIZE 1
static inline uint32_t timer0_ev_pending_zero_extract(uint32_t oldword) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return ( (oldword >> 0) & mask );
}
static inline uint32_t timer0_ev_pending_zero_read(void) {
	uint32_t word = timer0_ev_pending_read();
	return timer0_ev_pending_zero_extract(word);
}
static inline uint32_t timer0_ev_pending_zero_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void timer0_ev_pending_zero_write(uint32_t plain_value) {
	uint32_t oldword = timer0_ev_pending_read();
	uint32_t newword = timer0_ev_pending_zero_replace(oldword, plain_value);
	timer0_ev_pending_write(newword);
}
#define CSR_TIMER0_EV_ENABLE_ADDR (CSR_BASE + 0x781cL)
#define CSR_TIMER0_EV_ENABLE_SIZE 1
static inline uint32_t timer0_ev_enable_read(void) {
	return csr_read_simple((CSR_BASE + 0x781cL));
}
static inline void timer0_ev_enable_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x781cL));
}
#define CSR_TIMER0_EV_ENABLE_ZERO_OFFSET 0
#define CSR_TIMER0_EV_ENABLE_ZERO_SIZE 1
static inline uint32_t timer0_ev_enable_zero_extract(uint32_t oldword) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return ( (oldword >> 0) & mask );
}
static inline uint32_t timer0_ev_enable_zero_read(void) {
	uint32_t word = timer0_ev_enable_read();
	return timer0_ev_enable_zero_extract(word);
}
static inline uint32_t timer0_ev_enable_zero_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void timer0_ev_enable_zero_write(uint32_t plain_value) {
	uint32_t oldword = timer0_ev_enable_read();
	uint32_t newword = timer0_ev_enable_zero_replace(oldword, plain_value);
	timer0_ev_enable_write(newword);
}

/* uart */
#define CSR_UART_BASE (CSR_BASE + 0x8000L)
#define CSR_UART_RXTX_ADDR (CSR_BASE + 0x8000L)
#define CSR_UART_RXTX_SIZE 1
static inline uint32_t uart_rxtx_read(void) {
	return csr_read_simple((CSR_BASE + 0x8000L));
}
static inline void uart_rxtx_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x8000L));
}
#define CSR_UART_TXFULL_ADDR (CSR_BASE + 0x8004L)
#define CSR_UART_TXFULL_SIZE 1
static inline uint32_t uart_txfull_read(void) {
	return csr_read_simple((CSR_BASE + 0x8004L));
}
#define CSR_UART_RXEMPTY_ADDR (CSR_BASE + 0x8008L)
#define CSR_UART_RXEMPTY_SIZE 1
static inline uint32_t uart_rxempty_read(void) {
	return csr_read_simple((CSR_BASE + 0x8008L));
}
#define CSR_UART_EV_STATUS_ADDR (CSR_BASE + 0x800cL)
#define CSR_UART_EV_STATUS_SIZE 1
static inline uint32_t uart_ev_status_read(void) {
	return csr_read_simple((CSR_BASE + 0x800cL));
}
#define CSR_UART_EV_STATUS_TX_OFFSET 0
#define CSR_UART_EV_STATUS_TX_SIZE 1
static inline uint32_t uart_ev_status_tx_extract(uint32_t oldword) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return ( (oldword >> 0) & mask );
}
static inline uint32_t uart_ev_status_tx_read(void) {
	uint32_t word = uart_ev_status_read();
	return uart_ev_status_tx_extract(word);
}
#define CSR_UART_EV_STATUS_RX_OFFSET 1
#define CSR_UART_EV_STATUS_RX_SIZE 1
static inline uint32_t uart_ev_status_rx_extract(uint32_t oldword) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return ( (oldword >> 1) & mask );
}
static inline uint32_t uart_ev_status_rx_read(void) {
	uint32_t word = uart_ev_status_read();
	return uart_ev_status_rx_extract(word);
}
#define CSR_UART_EV_PENDING_ADDR (CSR_BASE + 0x8010L)
#define CSR_UART_EV_PENDING_SIZE 1
static inline uint32_t uart_ev_pending_read(void) {
	return csr_read_simple((CSR_BASE + 0x8010L));
}
static inline void uart_ev_pending_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x8010L));
}
#define CSR_UART_EV_PENDING_TX_OFFSET 0
#define CSR_UART_EV_PENDING_TX_SIZE 1
static inline uint32_t uart_ev_pending_tx_extract(uint32_t oldword) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return ( (oldword >> 0) & mask );
}
static inline uint32_t uart_ev_pending_tx_read(void) {
	uint32_t word = uart_ev_pending_read();
	return uart_ev_pending_tx_extract(word);
}
static inline uint32_t uart_ev_pending_tx_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void uart_ev_pending_tx_write(uint32_t plain_value) {
	uint32_t oldword = uart_ev_pending_read();
	uint32_t newword = uart_ev_pending_tx_replace(oldword, plain_value);
	uart_ev_pending_write(newword);
}
#define CSR_UART_EV_PENDING_RX_OFFSET 1
#define CSR_UART_EV_PENDING_RX_SIZE 1
static inline uint32_t uart_ev_pending_rx_extract(uint32_t oldword) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return ( (oldword >> 1) & mask );
}
static inline uint32_t uart_ev_pending_rx_read(void) {
	uint32_t word = uart_ev_pending_read();
	return uart_ev_pending_rx_extract(word);
}
static inline uint32_t uart_ev_pending_rx_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return (oldword & (~(mask << 1))) | (mask & plain_value)<< 1 ;
}
static inline void uart_ev_pending_rx_write(uint32_t plain_value) {
	uint32_t oldword = uart_ev_pending_read();
	uint32_t newword = uart_ev_pending_rx_replace(oldword, plain_value);
	uart_ev_pending_write(newword);
}
#define CSR_UART_EV_ENABLE_ADDR (CSR_BASE + 0x8014L)
#define CSR_UART_EV_ENABLE_SIZE 1
static inline uint32_t uart_ev_enable_read(void) {
	return csr_read_simple((CSR_BASE + 0x8014L));
}
static inline void uart_ev_enable_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x8014L));
}
#define CSR_UART_EV_ENABLE_TX_OFFSET 0
#define CSR_UART_EV_ENABLE_TX_SIZE 1
static inline uint32_t uart_ev_enable_tx_extract(uint32_t oldword) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return ( (oldword >> 0) & mask );
}
static inline uint32_t uart_ev_enable_tx_read(void) {
	uint32_t word = uart_ev_enable_read();
	return uart_ev_enable_tx_extract(word);
}
static inline uint32_t uart_ev_enable_tx_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void uart_ev_enable_tx_write(uint32_t plain_value) {
	uint32_t oldword = uart_ev_enable_read();
	uint32_t newword = uart_ev_enable_tx_replace(oldword, plain_value);
	uart_ev_enable_write(newword);
}
#define CSR_UART_EV_ENABLE_RX_OFFSET 1
#define CSR_UART_EV_ENABLE_RX_SIZE 1
static inline uint32_t uart_ev_enable_rx_extract(uint32_t oldword) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return ( (oldword >> 1) & mask );
}
static inline uint32_t uart_ev_enable_rx_read(void) {
	uint32_t word = uart_ev_enable_read();
	return uart_ev_enable_rx_extract(word);
}
static inline uint32_t uart_ev_enable_rx_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return (oldword & (~(mask << 1))) | (mask & plain_value)<< 1 ;
}
static inline void uart_ev_enable_rx_write(uint32_t plain_value) {
	uint32_t oldword = uart_ev_enable_read();
	uint32_t newword = uart_ev_enable_rx_replace(oldword, plain_value);
	uart_ev_enable_write(newword);
}
#define CSR_UART_TXEMPTY_ADDR (CSR_BASE + 0x8018L)
#define CSR_UART_TXEMPTY_SIZE 1
static inline uint32_t uart_txempty_read(void) {
	return csr_read_simple((CSR_BASE + 0x8018L));
}
#define CSR_UART_RXFULL_ADDR (CSR_BASE + 0x801cL)
#define CSR_UART_RXFULL_SIZE 1
static inline uint32_t uart_rxfull_read(void) {
	return csr_read_simple((CSR_BASE + 0x801cL));
}

#endif
